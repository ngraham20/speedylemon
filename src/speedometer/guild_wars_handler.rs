use mumblelink_reader::mumble_link_handler::MumbleLinkHandler;
use mumblelink_reader::mumble_link::{MumbleLinkReader, MumbleLinkDataReader};
use anyhow::{Context, Result};
use log;
use serde_json::Value;

use super::racer::Racer;
use super::camera::Camera;

#[derive(Copy, Clone, Debug)]
#[repr(C)]
struct GuildwarsContext {
    server_address: [u8; 28],
    map_id: u32,
    map_type: u32,
    shard_id: u32,
    instance: u32,
    build_id: u32,
    ui_state: u32,
    compass_width: u16,
    compass_height: u16,
    compass_rotation: f32,
    player_x: f32,
    player_y: f32,
    map_center_x: f32,
    map_center_y: f32,
    map_scale: f32,
    process_id: u32,
    mount_index: u8,
}

pub type Position = [f32; 3];

pub struct GW2Data {
    handler: MumbleLinkHandler,
    pub racer: Racer,
    pub camera: Camera,
    pub map_id: u32,
}

impl GW2Data {
    pub fn new() -> Result<GW2Data> {
        Ok(GW2Data {
            handler: MumbleLinkHandler::new()?,
            racer: Racer::new(),
            camera: Camera::new(),
            map_id: 0u32,
        })
    }

    /// Initializes the Mumble Link Data
    /// 
    /// For some reason, in order for Guild Wars 2 to start sending data, a certain number of
    /// requests need to be sent in a certain amount of time.
    #[cfg(target_family="windows")]
    pub fn init(&mut self) -> Result<()> {
        log::info!("Waiting for Guild Wars 2 Mumble data");
        let mut data = self.handler.read().context(format!("unable to read GW2 data from mumble API"))?;
        while data.name != "Guild Wars 2" {
            data = self.handler.read().context(format!("unable to read GW2 data from mumble API"))?;
            std::thread::sleep(std::time::Duration::from_millis(500));
        }
        log::debug!("{}", &data.identity);
        let identity: Value = serde_json::from_str(&data.identity)?;
        self.racer.name = identity["name"].to_string().replace("\"", "");
        Ok(())
    }

    /// Updates the Mumble Link Data
    /// 
    /// init should be called before update in order to ensure data is generated by Guild Wars 2
    /// 
    /// # Example
    /// ```
    /// let mut data = guild_wars_handler::GW2Data::new()?;
    /// // init() is called first
    /// data.init()?;
    /// data.update()?;
    /// ```
    #[cfg(target_family="windows")]
    pub fn update(&mut self) -> Result<()> {
        let data = self.handler.read().context(format!("unable to read GW2 data from mumble API"))?;
        self.racer.position = data.avatar.position;
        self.camera.position = data.camera.position;

        let gw2_data = data.read_context_into_struct::<GuildwarsContext>();

        self.map_id = gw2_data.map_id;
        Ok(())
    }

    #[cfg(target_family="unix")]
    pub fn update(&mut self) -> Result<()> {
        Ok(())
    }

    #[cfg(target_family="unix")]
    pub fn init(&mut self) -> Result<()> {
        Ok(())
    }
}